apiVersion: batch/v1
kind: CronJob
metadata:
  name: stale-orders-cleanup
  namespace: foodybuddy
  labels:
    app: foodybuddy-cronjob
    component: order-cleanup
    purpose: maintenance
spec:
  schedule: "*/30 * * * *"  # Every 30 minutes
  concurrencyPolicy: Forbid  # Prevent overlapping executions
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: foodybuddy-cronjob
            component: order-cleanup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: cleanup-stale-orders
            image: postgres:15
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: foodybuddy-database-secret
                  key: DB_PASSWORD
            - name: PGHOST
              value: "postgres-database-0.postgres-db-service.foodybuddy.svc.cluster.local"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: foodybuddy-database-secret
                  key: DB_USERNAME
            - name: PGDATABASE
              value: "foodybuddy"
            command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Starting stale orders cleanup at $(date)"
              
              # Count orders before cleanup
              echo "Counting stale orders before cleanup..."
              STALE_COUNT=$(psql -h $PGHOST -U $PGUSER -d $PGDATABASE -t -c "
                SELECT COUNT(*) 
                FROM orders.orders 
                WHERE status = 'PENDING' 
                AND created_at < NOW() - INTERVAL '2 hours';
              ")
              echo "Found $STALE_COUNT stale orders to clean up"
              
              # Cancel orders stuck in PENDING for > 2 hours
              echo "Cancelling stale orders..."
              CANCELLED_ORDERS=$(psql -h $PGHOST -U $PGUSER -d $PGDATABASE -t -c "
                UPDATE orders.orders 
                SET status = 'CANCELLED', updated_at = NOW() 
                WHERE status = 'PENDING' 
                AND created_at < NOW() - INTERVAL '2 hours'
                RETURNING order_id;
              ")
              
              # Update corresponding gateway orders
              echo "Updating gateway orders..."
              psql -h $PGHOST -U $PGUSER -d $PGDATABASE -c "
                UPDATE gateway.gateway_orders 
                SET status = 'CANCELLED', updated_at = NOW() 
                WHERE status = 'PENDING' 
                AND created_at < NOW() - INTERVAL '2 hours';
              "
              
              # Update corresponding payments
              echo "Updating payment status..."
              psql -h $PGHOST -U $PGUSER -d $PGDATABASE -c "
                UPDATE payments.payments 
                SET status = 'CANCELLED', updated_at = NOW() 
                WHERE order_id IN (
                  SELECT order_id 
                  FROM orders.orders 
                  WHERE status = 'CANCELLED' 
                  AND updated_at > NOW() - INTERVAL '1 minute'
                );
              "
              
              echo "Stale orders cleanup completed at $(date)"
              echo "Cancelled orders: $CANCELLED_ORDERS"
              
              # Log cleanup statistics
              psql -h $PGHOST -U $PGUSER -d $PGDATABASE -c "
                INSERT INTO gateway.cleanup_logs (job_type, records_processed, execution_time, status)
                VALUES ('stale_orders_cleanup', $STALE_COUNT, NOW(), 'SUCCESS')
                ON CONFLICT DO NOTHING;
              " || echo "Note: cleanup_logs table may not exist yet"
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
