apiVersion: apps/v1
kind: Deployment
metadata:
  name: foodybuddy-orders
  namespace: foodybuddy
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: foodybuddy-orders
  template:
    metadata:
      labels:
        app: foodybuddy-orders
    spec:
      initContainers:
      - name: db-schema-validator
        image: postgres:15
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: foodybuddy-database-secret
              key: DB_PASSWORD
        - name: PGHOST
          value: "postgres-database-0.postgres-db-service.foodybuddy.svc.cluster.local"
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: foodybuddy-database-secret
              key: DB_USERNAME
        - name: PGDATABASE
          value: "foodybuddy"
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "üîç Validating database schema for Orders service..."
          
          # Wait for database to be ready
          until pg_isready -h $PGHOST -U $PGUSER; do
            echo "‚è≥ Waiting for database to be ready..."
            sleep 2
          done
          
          # Validate orders schema exists
          SCHEMA_EXISTS=$(psql -h $PGHOST -U $PGUSER -d $PGDATABASE -t -c "
            SELECT CASE 
              WHEN EXISTS (SELECT 1 FROM information_schema.schemata WHERE schema_name = 'orders') 
              THEN 'EXISTS' 
              ELSE 'MISSING' 
            END;
          " | tr -d ' \n\r')
          
          echo "Schema validation result: '$SCHEMA_EXISTS'"
          
          if [ "$SCHEMA_EXISTS" != "EXISTS" ]; then
            echo "‚ùå Orders schema validation failed. Schema 'orders' not found."
            exit 1
          fi
          
          # Validate critical tables exist
          TABLE_COUNT=$(psql -h $PGHOST -U $PGUSER -d $PGDATABASE -t -c "
            SELECT COUNT(*) 
            FROM information_schema.tables 
            WHERE table_schema = 'orders'
            AND table_name IN ('orders', 'order_items');
          " | tr -d ' \n\r')
          
          echo "Table count result: '$TABLE_COUNT'"
          
          if [ "$TABLE_COUNT" -lt 2 ]; then
            echo "‚ùå Critical tables validation failed. Expected 2 tables in orders schema, found $TABLE_COUNT"
            exit 1
          fi
          
          echo "‚úÖ Database schema validation passed for Orders service!"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      containers:
      - name: foodybuddy-orders
        image: foodybuddy.prod.orders:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8081
          protocol: TCP
        env:
        # Spring Configuration
        - name: SPRING_PROFILES_ACTIVE
          valueFrom:
            configMapKeyRef:
              name: foodybuddy-orders-config
              key: SPRING_PROFILES_ACTIVE
        # Database Configuration
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: foodybuddy-orders-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: foodybuddy-orders-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: foodybuddy-orders-config
              key: DB_NAME
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: foodybuddy-database-secret
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: foodybuddy-database-secret
              key: DB_PASSWORD
        - name: DB_SCHEMA_ORDERS
          valueFrom:
            configMapKeyRef:
              name: foodybuddy-orders-config
              key: DB_SCHEMA_ORDERS
        # Service URLs Configuration
        - name: GATEWAY_URL
          valueFrom:
            configMapKeyRef:
              name: foodybuddy-orders-config
              key: GATEWAY_URL
        # JPA Configuration
        - name: JPA_SHOW_SQL
          valueFrom:
            configMapKeyRef:
              name: foodybuddy-orders-config
              key: JPA_SHOW_SQL
        - name: JPA_HIBERNATE_DDL_AUTO
          valueFrom:
            configMapKeyRef:
              name: foodybuddy-orders-config
              key: JPA_HIBERNATE_DDL_AUTO
        - name: JPA_FORMAT_SQL
          valueFrom:
            configMapKeyRef:
              name: foodybuddy-orders-config
              key: JPA_FORMAT_SQL
        # Logging Configuration
        - name: LOG_LEVEL_ORDERS
          valueFrom:
            configMapKeyRef:
              name: foodybuddy-orders-config
              key: LOG_LEVEL_ORDERS
        - name: LOG_PATTERN_CONSOLE
          valueFrom:
            configMapKeyRef:
              name: foodybuddy-orders-config
              key: LOG_PATTERN_CONSOLE
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
      restartPolicy: Always
